import static org.junit.Assert.assertEquals;

import org.junit.Test;

import components.map.Map;
import components.map.Map.Pair;

/**
 * JUnit test fixture for {@code Map<String, String>}'s constructor and kernel
 * methods.
 *
 * @author Put your name here
 *
 */
public abstract class MapTest {

    /**
     * Invokes the appropriate {@code Map} constructor for the implementation
     * under test and returns the result.
     *
     * @return the new map
     * @ensures constructorTest = {}
     */
    protected abstract Map<String, String> constructorTest();

    /**
     * Invokes the appropriate {@code Map} constructor for the reference
     * implementation and returns the result.
     *
     * @return the new map
     * @ensures constructorRef = {}
     */
    protected abstract Map<String, String> constructorRef();

    /**
     *
     * Creates and returns a {@code Map<String, String>} of the implementation
     * under test type with the given entries.
     *
     * @param args
     *            the (key, value) pairs for the map
     * @return the constructed map
     * @requires <pre>
     * [args.length is even]  and
     * [the 'key' entries in args are unique]
     * </pre>
     * @ensures createFromArgsTest = [pairs in args]
     */
    private Map<String, String> createFromArgsTest(String... args) {
        assert args.length % 2 == 0 : "Violation of: args.length is even";
        Map<String, String> map = this.constructorTest();
        for (int i = 0; i < args.length; i += 2) {
            assert !map.hasKey(args[i]) : ""
                    + "Violation of: the 'key' entries in args are unique";
            map.add(args[i], args[i + 1]);
        }
        return map;
    }

    /**
     *
     * Creates and returns a {@code Map<String, String>} of the reference
     * implementation type with the given entries.
     *
     * @param args
     *            the (key, value) pairs for the map
     * @return the constructed map
     * @requires <pre>
     * [args.length is even]  and
     * [the 'key' entries in args are unique]
     * </pre>
     * @ensures createFromArgsRef = [pairs in args]
     */
    private Map<String, String> createFromArgsRef(String... args) {
        assert args.length % 2 == 0 : "Violation of: args.length is even";
        Map<String, String> map = this.constructorRef();
        for (int i = 0; i < args.length; i += 2) {
            assert !map.hasKey(args[i]) : ""
                    + "Violation of: the 'key' entries in args are unique";
            map.add(args[i], args[i + 1]);
        }
        return map;
    }

    //test length of empty constructor
    @Test
    public void testConstructor() {
        Map<String, String> m = this.constructorTest();
        Map<String, String> mExpected = this.constructorRef();
        assertEquals(mExpected, m);
    }

    //test the length of the sequence
    @Test
    public final void testSize() {
        Map<String, String> m = this.createFromArgsTest("apple", "banana");
        Map<String, String> mExpected = this.createFromArgsRef("apple",
                "banana");
        int size = m.size();
        assertEquals(mExpected, m);
        assertEquals(1, size);
    }

    //test for add
    @Test
    public void testAdd() {
        Map<String, String> m = this.createFromArgsTest("b", "c");
        Map<String, String> mExpected = this.createFromArgsRef("b", "c", "a",
                "d");
        m.add("a", "d");
        assertEquals(mExpected, m);
    }

    //test for remove
    @Test
    public final void testRemove() {
        Map<String, String> m = this.createFromArgsTest("one", "two", "three",
                "four");
        Pair<String, String> removed = m.remove("three");
        assertEquals("three", removed.key());
        assertEquals("four", removed.value());
    }

    //test removeAny
    @Test
    public final void testRemoveAny() {
        Map<String, String> m = this.createFromArgsTest("one", "two", "three",
                "four");
        Map<String, String> mExpected = this.createFromArgsRef("one", "two",
                "three", "four");

        Pair<String, String> removed = m.removeAny();

        assertEquals(true, mExpected.hasKey(removed.key()));
        assertEquals(true, mExpected.hasValue(removed.value()));

        mExpected.remove(removed.key());
        assertEquals(mExpected, m);
    }

    //test hasKey
    @Test
    public final void testHasKey() {
        Map<String, String> m = this.createFromArgsTest("one", "two", "three",
                "four");
        Map<String, String> mExpected = this.createFromArgsRef("one", "two",
                "three", "four");
        assertEquals(true, m.hasKey("one"));
        assertEquals(false, m.hasKey("four"));
        assertEquals(mExpected, m);
    }

}
